// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RiftArena.Models.Contexts;

namespace RiftARENA.Migrations
{
    [DbContext(typeof(RiftArenaContext))]
    [Migration("20211203160949_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("RiftArena.Models.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Defeats")
                        .HasColumnType("int");

                    b.Property<int>("GamesPlayed")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberMembers")
                        .HasColumnType("int");

                    b.Property<string>("Poster")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rank")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeamLeaderNickname")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TournamentsWon")
                        .HasColumnType("int");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.HasKey("TeamId");

                    b.HasIndex("TeamLeaderNickname");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("RiftArena.Models.Tournament", b =>
                {
                    b.Property<int>("TournamentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FinalWinner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiniumTier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfTeams")
                        .HasColumnType("int");

                    b.Property<string>("Poster")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Prize")
                        .HasColumnType("real");

                    b.Property<string>("Rank")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("TournamentId");

                    b.HasIndex("TeamId");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("RiftArena.Models.User", b =>
                {
                    b.Property<string>("Nickname")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContaRiot")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumVitoriasTotal")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Rank")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<string>("Tier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("Nickname");

                    b.HasIndex("TeamId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RiftArena.Models.Team", b =>
                {
                    b.HasOne("RiftArena.Models.User", "TeamLeader")
                        .WithMany()
                        .HasForeignKey("TeamLeaderNickname");

                    b.Navigation("TeamLeader");
                });

            modelBuilder.Entity("RiftArena.Models.Tournament", b =>
                {
                    b.HasOne("RiftArena.Models.Team", null)
                        .WithMany("Tournament")
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("RiftArena.Models.User", b =>
                {
                    b.HasOne("RiftArena.Models.Team", null)
                        .WithMany("Members")
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("RiftArena.Models.Team", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("Tournament");
                });
#pragma warning restore 612, 618
        }
    }
}
